plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'idea'
    id 'com.google.dagger.hilt.android'
    id 'kotlin-kapt'
}

apply plugin: 'com.android.application'
apply plugin: 'idea'

android {
    namespace 'foundation.mee.android_client'
    compileSdk 33
    defaultConfig {
        applicationId "foundation.mee.android_client"
        minSdk 23
        targetSdk 33
        versionCode 8
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    ndkVersion "25.2.9519653"
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.4.4'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }

    }
}

apply plugin: 'org.mozilla.rust-android-gradle.rust-android'

cargo {
    module = "../mee-core"       // Or whatever directory contains your Cargo.toml
    libname = "uniffi_mee_agent"          // Or whatever matches Cargo.toml's [package] name.
    targets = ["arm64", "x86_64"]  // See bellow for a longer list of options
    targetDirectory = "../mee-core/target"
    apiLevel = 23
    exec { spec, toolchain ->
        spec.environment("RANLIB", "~/Library/Android/sdk/ndk/${android.ndkVersion}/toolchains/llvm/prebuilt/darwin-x86_64/bin/llvm-ranlib")
        spec.environment("GOOGLE_API_CLIENT_ID", "211039582599-hmmovsfo59081bt9k19kd3k7927nettq.apps.googleusercontent.com")
        spec.environment("GOOGLE_API_REDIRECT_URI", "com.googleusercontent.apps.211039582599-hmmovsfo59081bt9k19kd3k7927nettq:/oauth2redirect")
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.10.1'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.1'
    implementation 'androidx.activity:activity-compose:1.7.2'
    implementation "androidx.compose.ui:ui:$compose_ui_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_ui_version"
    implementation 'androidx.compose.material:material:1.4.3'
    implementation "net.java.dev.jna:jna:5.7.0@aar"
    implementation("io.coil-kt:coil-compose:2.2.2")
    implementation("io.coil-kt:coil-svg:2.2.2")
    implementation "androidx.navigation:navigation-compose:2.6.0"
    implementation "com.google.dagger:hilt-android:$hilt_version"
    implementation 'androidx.lifecycle:lifecycle-process:2.6.1'
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"
    implementation "androidx.hilt:hilt-navigation-compose:1.0.0"
    implementation("androidx.biometric:biometric:1.1.0")
    implementation("androidx.datastore:datastore-preferences:1.0.0")
    implementation("androidx.security:security-crypto:1.0.0")
    implementation("com.squareup.okhttp3:okhttp:4.10.0")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.2")

    implementation("com.squareup.moshi:moshi-kotlin:1.14.0")
    implementation("com.android.installreferrer:installreferrer:2.2")
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_ui_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_ui_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_ui_version"
}

tasks.whenTaskAdded { task ->
    if ((task.name == 'mergeDebugJniLibFolders' || task.name == 'mergeReleaseJniLibFolders')) {
        task.dependsOn 'cargoBuild'
    }
}

android.applicationVariants.all { variant ->
    def t = tasks.register("generate${variant.name.capitalize()}UniFFIBindings", Exec) {
        workingDir '../mee-core'
        // Runs the bindings generation, note that you must have uniffi-bindgen installed and in your PATH environment variable
        commandLine 'cargo', 'run', '--bin', 'mee_uniffi_bindgen', 'generate', "${rootDir}/mee-core/mee_agent/src/mee.udl", '--language', 'kotlin', '--out-dir', "${buildDir}/generated/source/uniffi/${variant.name}/java"
    }
    variant.javaCompileProvider.get().dependsOn(t)
    def sourceSet = variant.sourceSets.find { it.name == variant.name }
    sourceSet.java.srcDir new File(buildDir, "generated/source/uniffi/${variant.name}/java")
    // XXX: I've been trying to make this work but I can't, so the compiled bindings will show as "regular sources" in Android Studio.
    idea.module.generatedSourceDirs += file("${buildDir}/generated/source/uniffi/${variant.name}/java/uniffi")
}

kapt {
    correctErrorTypes = true
}
